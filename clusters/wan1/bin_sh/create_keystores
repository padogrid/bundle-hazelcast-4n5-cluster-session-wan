#!/usr/bin/env bash

# ========================================================================
# Copyright (c) 2020-2021 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

if [ "$HELP" == "true" ]; then
cat <<EOF

NAME
   $EXECUTABLE - Create all WAN test harness keystores

SYNOPSIS
   $EXECUTABLE [-?]

DESCRIPTION
   Creates all WAN test harness kestores for clusters and apps.

DEFAULT
   ./$EXECUTABLE

EOF
   exit
fi

. ./setenv_keystore.sh

# Create etc/ssl dir
if [ ! -d ../etc/ssl ]; then
   mkdir -p ../etc/ssl
fi

# cluster keystores
echo "Generating cluster keystore..."
CLUSTER_KEYSTORE_FILE=$SSL_DIR/$CLUSTER_PREFIX.keystore
CLUSTER_TRUST_KEYSTORE_FILE=$SSL_DIR/$CLUSTER_PREFIX-trust.keystore
for NUM in $(seq 1 $CLUSTER_COUNT); do
   ALIAS=$CLUSTER_PREFIX$NUM
   echo "Generating $ALIAS..."

   keytool -genkey -alias $ALIAS -storetype PKCS12 -keyalg RSA -keysize 2048 \
   -keystore $CLUSTER_KEYSTORE_FILE \
   -storepass $KEYSTORE_PASSWORD \
   -dname 'CN=Member, OU=PS, O=Sorint.lab, L=Boston, ST=MA, C=US' \
   -ext 'SAN=dns:server'${NUM}'.demo.com,dns:'${HOST_NAME}',dns:localhost,ip:127.0.0.1,ip:::1'

   # Export trusted certificate
   keytool -export -keystore $CLUSTER_KEYSTORE_FILE -alias $ALIAS -file $SSL_DIR/$ALIAS.cer -storepass $KEYSTORE_PASSWORD
   # Import the trusted certificate in a separate keystore
   keytool -import -file $SSL_DIR/$ALIAS.cer -alias $ALIAS \
   -keystore $CLUSTER_TRUST_KEYSTORE_FILE \
   -storepass $KEYSTORE_PASSWORD \
   -storetype pkcs12 \
   -noprompt
done
echo ""
echo "Generating client keystores..."
# client keystores
for NUM in $(seq 1 $CLIENT_COUNT); do
   ALIAS=$CLIENT_PREFIX$NUM
   KEYSTORE_FILE=$SSL_DIR/$ALIAS.keystore
   echo "Generating $KEYSTORE_FILE..."
   keytool -genkey -alias $ALIAS -storetype PKCS12 -keyalg RSA -keysize 2048 \
   -keystore $KEYSTORE_FILE \
   -storepass $KEYSTORE_PASSWORD \
   -dname 'CN=Member, OU=PS, O=Sorint.lab, L=Boston, ST=MA, C=US' \
   -ext 'SAN=dns:server'${NUM}'.demo.com,dns:'${HOST_NAME}',dns:localhost,ip:127.0.0.1,ip:::1'

   TRUST_KEYSTORE_FILE=$SSL_DIR/$ALIAS-trust.keystore
   echo "Generating $TRUST_KEYSTORE_FILE..."
   # Export trusted certificate
   keytool -export -keystore $KEYSTORE_FILE -alias $ALIAS -file $SSL_DIR/$ALIAS.cer -storepass $KEYSTORE_PASSWORD
   # Import the trusted certificate in a separate keystore
   keytool -import -file $SSL_DIR/$ALIAS.cer -alias $ALIAS \
   -keystore $TRUST_KEYSTORE_FILE \
   -storepass $KEYSTORE_PASSWORD \
   -storetype pkcs12 \
   -noprompt
done
echo ""

#
# Import client's private key into cluster's keystore
#
for CLIENT_NUM in $(seq 1 $CLIENT_COUNT); do
   CLIENT_ALIAS=$CLIENT_PREFIX$CLIENT_NUM
   CLIENT_KEYSTORE_FILE=$SSL_DIR/$CLIENT_ALIAS.keystore
   echo "Importing $CLIENT_ALIAS to $CLUSTER_KEYSTORE_FILE..."
   keytool -importkeystore \
   -srckeystore $CLIENT_KEYSTORE_FILE \
   -destkeystore $CLUSTER_KEYSTORE_FILE \
   -srcstoretype pkcs12 \
   -deststoretype pkcs12 \
   -srcstorepass $KEYSTORE_PASSWORD \
   -deststorepass $KEYSTORE_PASSWORD \
   -srcalias $CLIENT_ALIAS \
   -destalias $CLIENT_ALIAS \
   -srckeypass $KEYSTORE_PASSWORD \
   -destkeypass $KEYSTORE_PASSWORD \
   -noprompt
done
echo ""

#
# Import clusters's private key into each client's keystore
#
for CLIENT_NUM in $(seq 1 $CLIENT_COUNT); do
   ALIAS=$CLIENT_PREFIX$CLIENT_NUM
   KEYSTORE_FILE=$SSL_DIR/$ALIAS.keystore
   for CLUSTER_NUM in $(seq 1 $CLUSTER_COUNT); do
      CLUSTER_ALIAS=$CLUSTER_PREFIX$CLUSTER_NUM
      echo "Importing $CLUSTER_ALIAS into $KEYSTORE_FILE..."
      keytool -importkeystore \
      -srckeystore $CLUSTER_KEYSTORE_FILE \
      -destkeystore $KEYSTORE_FILE \
      -srcstoretype pkcs12 \
      -deststoretype pkcs12 \
      -srcstorepass $KEYSTORE_PASSWORD \
      -deststorepass $KEYSTORE_PASSWORD \
      -srcalias $CLUSTER_ALIAS \
      -destalias $CLUSTER_ALIAS \
      -srckeypass $KEYSTORE_PASSWORD \
      -destkeypass $KEYSTORE_PASSWORD \
      -noprompt
   done
done
echo ""

#
# Import the cluster trusted certificates into the client's trust keystores
#
for CLIENT_NUM in $(seq 1 $CLIENT_COUNT); do
   CLIENT_ALIAS=$CLIENT_PREFIX$CLIENT_NUM
   CLIENT_TRUST_KEYSTORE_FILE=$SSL_DIR/$CLIENT_ALIAS-trust.keystore
   for CLUSTER_NUM in $(seq 1 $CLUSTER_COUNT); do
      CLUSTER_ALIAS=$CLUSTER_PREFIX$CLUSTER_NUM
      CLUSTER_TRUSTED_CERTIFICATE_FILE=$SSL_DIR/$CLUSTER_ALIAS.cer
      echo "Importing $CLUSTER_TRUSTED_CERTIFICATE_FILE into $CLIENT_TRUST_KEYSTORE_FILE..."
      keytool -import \
        -file $CLUSTER_TRUSTED_CERTIFICATE_FILE \
        -alias $CLUSTER_ALIAS \
        -keystore $CLIENT_TRUST_KEYSTORE_FILE \
        -storepass $KEYSTORE_PASSWORD \
        -storetype pkcs12 \
        -noprompt
   done
done
echo ""

#
# Import the client trusted certificates into the cluster's trust keystore
#
for CLIENT_NUM in $(seq 1 $CLIENT_COUNT); do
   CLIENT_ALIAS=$CLIENT_PREFIX$CLIENT_NUM
   CLIENT_TRUSTED_CERTIFICATE_FILE=$SSL_DIR/$CLIENT_ALIAS.cer
   echo "Importing $CLIENT_TRUSTED_CERTIFICATE_FILE into $CLUSTER_TRUST_KEYSTORE_FILE..."
   keytool -import \
     -file $CLIENT_TRUSTED_CERTIFICATE_FILE \
     -alias $CLIENT_ALIAS \
     -keystore $CLUSTER_TRUST_KEYSTORE_FILE \
     -storepass $KEYSTORE_PASSWORD \
     -storetype pkcs12 \
     -noprompt
done
echo ""
